#### This script is not perfect in terms of creating a compatitive PDB file for OpenMM
#### It may look fine but you should execute the test run to recognize any error appearing during the generation. 

from simtk.openmm.app import *
from simtk.openmm import *
from simtk.unit import *
from sys import stdout
import numpy as np
import math
import scipy
from scipy import special 
from random import seed
from random import randint

###########################################################################
###                           PDB Generator                             ###
###########################################################################
def genCellCoord3D(INPUTNAME,NoCell,Rlim,lowx,highx,lowy,highy,lowz,highz):
    numP = 0
    maxP = NoCell
    maxIter = 1000*maxP
    minDist = Rlim
    loopcounter = 1
        
    xo = np.zeros(NoCell)
    yo = np.zeros(NoCell)
    zo = np.zeros(NoCell)
        
    while numP < maxP and loopcounter < maxIter:
        xpossible = randint(lowx,highx)
        ypossible = randint(lowy,highy)
        zpossible = randint(lowz,highz)
        if numP == 0:
            xo[numP] = xpossible
            yo[numP] = ypossible
            zo[numP] = zpossible
            numP = numP + 1
            continue
        distance = np.sqrt((xo-xpossible)**2 + (yo-ypossible)**2 + (zo-zpossible)**2)
        if min(distance) >= minDist:
            xo[numP] = xpossible
            yo[numP] = ypossible
            zo[numP] = zpossible
            numP = numP + 1
        loopcounter = loopcounter + 1
    
    CellCoord = np.array([xo,yo,zo])
    
    structure = open(INPUTNAME+".pdb","w") 
    structure.write("REMARK    GENERATED BY genCellCoord \n")
    structure.write("REMARK    THIS IS A SIMULATION BOX \n")
    angle = format(90, '.2f')
    boxlx = format(highx, '.2f')
    boxly = format(highy, '.2f')
    boxlz = format(highz, '.2f')
    structure.write("MODEL     1 \n")
    
    for i in np.arange(NoCell):
        x = format(xo[i],'.3f')
        y = format(yo[i],'.3f')
        z = format(zo[i],'.3f')
        if i < 9:
            structure.write("ATOM      "+str(i+1)+"  AR   AR     "+str(i+1)+"       "+str(x)+"   "+str(y)+"   "+str(z)+"   1.00  0.00 \n")
        elif i >= 10 and i < 99:
            structure.write("ATOM    "+str(i+1)+"   OW  HOH    "+str(i+1)+"      "+str(x)+"   "+str(y)+"   "+str(z)+"   1.00  0.00 \n")
        elif i >= 100 and i < 999:
            structure.write("ATOM    "+str(i+1)+"  OW  HOH    "+str(i+1)+"     "+str(x)+"   "+str(y)+"   "+str(z)+"   1.00  0.00 \n")
        elif i >= 1000:
            structure.write("ATOM    "+str(i+1)+" OW  HOH    "+str(i+1)+"    "+str(x)+"   "+str(y)+"   "+str(z)+"   1.00  0.00 \n")
        
        
    structure.write("ENDMDL")
    structure.close
                   
    return CellCoord

###########################################################################
###                           Test RUN - OpenMM                         ###
###########################################################################
def testRunner(filename):
    pdb = PDBFile(filename+'.pdb')
    forcefield = ForceField('/home/bending456/Ben-Code/Modeling-Codes/Codes/OpenMM_Tutorial/Particle_in_box/Particle_Ben.xml')
    system = forcefield.createSystem(pdb.topology, nonbondedMethod=PME, nonbondedCutoff=1*nanometer, constraints=HBonds)
    integrator = LangevinIntegrator(300*kelvin, 1/picosecond, 0.002*picoseconds)
    simulation = Simulation(pdb.topology, system, integrator)
    simulation.context.setPositions(pdb.positions)
    simulation.minimizeEnergy()
    simulation.reporters.append(PDBReporter('output.pdb', 10))
    simulation.reporters.append(StateDataReporter(stdout, 10, step=True, potentialEnergy=True, temperature=True))
    simulation.step(10)
    
    return 